//
// AgentGen Standard v1.5  Copyright (C) Frank Fock, All rights reserved
// Not for use in a commercial environment
//


#include "arn_6h_gws_mib.h"



/**
 *  generated by AgentGen 1.5 for AGENT++v3.3 
 * Fri Dec 18 10:11:57 CST 2015.
 */


//--AgentGen BEGIN=_INCLUDE
//--AgentGen END


/**
 *  title
 *
 */

title* title::instance = 0;

title::title():
   SnmpDisplayString(oidTitle, READWRITE, new OctetStr("6Harmonics GWS5000"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer title::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "title.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=title::title
	//--AgentGen END

}

title::~title()
{

	//--AgentGen BEGIN=title::~title
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void title::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=title::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

int title::set(const Vbx& vb)
{

	//--AgentGen BEGIN=title::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean title::value_ok(const Vbx& vb)
{

	//--AgentGen BEGIN=title::value_ok
	//--AgentGen END
	return TRUE;
}

int title::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = SnmpDisplayString::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=title::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=title
//--AgentGen END




/**
 *  banner
 *
 */

banner* banner::instance = 0;

banner::banner():
   SnmpDisplayString(oidBanner, READONLY, new OctetStr("6Harmonics Inc."), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer banner::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "banner.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=banner::banner
	//--AgentGen END

}

banner::~banner()
{

	//--AgentGen BEGIN=banner::~banner
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void banner::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=banner::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=banner
//--AgentGen END




/**
 *  hostname
 *
 */

hostname* hostname::instance = 0;

hostname::hostname():
   SnmpDisplayString(oidHostname, READONLY, new OctetStr("gws_car"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer hostname::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "hostname.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=hostname::hostname
	//--AgentGen END

}

hostname::~hostname()
{

	//--AgentGen BEGIN=hostname::~hostname
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void hostname::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=hostname::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=hostname
//--AgentGen END




/**
 *  ownerContact
 *
 */

ownerContact* ownerContact::instance = 0;

ownerContact::ownerContact():
   SnmpDisplayString(oidOwnerContact, READWRITE, new OctetStr("6Harmonics"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer ownerContact::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "ownerContact.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=ownerContact::ownerContact
	//--AgentGen END

}

ownerContact::~ownerContact()
{

	//--AgentGen BEGIN=ownerContact::~ownerContact
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void ownerContact::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ownerContact::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

int ownerContact::set(const Vbx& vb)
{

	//--AgentGen BEGIN=ownerContact::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean ownerContact::value_ok(const Vbx& vb)
{

	//--AgentGen BEGIN=ownerContact::value_ok
	//--AgentGen END
	return TRUE;
}

int ownerContact::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = SnmpDisplayString::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=ownerContact::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=ownerContact
//--AgentGen END




/**
 *  upTime
 *
 */

upTime* upTime::instance = 0;

upTime::upTime():
   SnmpDisplayString(oidUpTime, READONLY, new OctetStr("0"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer upTime::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "upTime.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=upTime::upTime
	//--AgentGen END

}

upTime::~upTime()
{

	//--AgentGen BEGIN=upTime::~upTime
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void upTime::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=upTime::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=upTime
//--AgentGen END




/**
 *  moduleType
 *
 */

moduleType* moduleType::instance = 0;

moduleType::moduleType():
   SnmpDisplayString(oidModuleType, READONLY, new OctetStr("CAR"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer moduleType::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "moduleType.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=moduleType::moduleType
	//--AgentGen END

}

moduleType::~moduleType()
{

	//--AgentGen BEGIN=moduleType::~moduleType
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void moduleType::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=moduleType::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=moduleType
//--AgentGen END




/**
 *  moduleSN
 *
 */

moduleSN* moduleSN::instance = 0;

moduleSN::moduleSN():
   SnmpDisplayString(oidModuleSN, READONLY, new OctetStr("20150611"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer moduleSN::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "moduleSN.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=moduleSN::moduleSN
	//--AgentGen END

}

moduleSN::~moduleSN()
{

	//--AgentGen BEGIN=moduleSN::~moduleSN
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void moduleSN::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=moduleSN::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=moduleSN
//--AgentGen END




/**
 *  ifnameRowStatus
 *
 */

ifnameRowStatus::ifnameRowStatus(const Oidx& id):
   snmpRowStatus(id, READCREATE)
{

	//--AgentGen BEGIN=ifnameRowStatus::ifnameRowStatus
	//--AgentGen END

}

ifnameRowStatus::~ifnameRowStatus()
{

	//--AgentGen BEGIN=ifnameRowStatus::~ifnameRowStatus
	//--AgentGen END
}

MibEntryPtr ifnameRowStatus::clone()
{
	MibEntryPtr other = new ifnameRowStatus(oid);
	((ifnameRowStatus*)other)->replace_value(value->clone());
	((ifnameRowStatus*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameRowStatus::clone
	//--AgentGen END
	return other;
}

long ifnameRowStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void ifnameRowStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int ifnameRowStatus::set(const Vbx& vb)
{

	//--AgentGen BEGIN=ifnameRowStatus::set
	//--AgentGen END
	return snmpRowStatus::set(vb);
}

int ifnameRowStatus::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = snmpRowStatus::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=ifnameRowStatus::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=ifnameRowStatus
//--AgentGen END




/**
 *  ifnameName
 *
 */

ifnameName::ifnameName(const Oidx& id):
   SnmpDisplayString(id, READONLY, new OctetStr("eth0"), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=ifnameName::ifnameName
	//--AgentGen END

}

ifnameName::~ifnameName()
{

	//--AgentGen BEGIN=ifnameName::~ifnameName
	//--AgentGen END
}

MibEntryPtr ifnameName::clone()
{
	MibEntryPtr other = new ifnameName(oid);
	((ifnameName*)other)->replace_value(value->clone());
	((ifnameName*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameName::clone
	//--AgentGen END
	return other;
}

void ifnameName::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameName::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameName
//--AgentGen END




/**
 *  ifnameBrLan
 *
 */

ifnameBrLan::ifnameBrLan(const Oidx& id):
   SnmpDisplayString(id, READONLY, new OctetStr("br-lan"), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=ifnameBrLan::ifnameBrLan
	//--AgentGen END

}

ifnameBrLan::~ifnameBrLan()
{

	//--AgentGen BEGIN=ifnameBrLan::~ifnameBrLan
	//--AgentGen END
}

MibEntryPtr ifnameBrLan::clone()
{
	MibEntryPtr other = new ifnameBrLan(oid);
	((ifnameBrLan*)other)->replace_value(value->clone());
	((ifnameBrLan*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameBrLan::clone
	//--AgentGen END
	return other;
}

void ifnameBrLan::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameBrLan::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameBrLan
//--AgentGen END




/**
 *  ifnameIP
 *
 */

ifnameIP::ifnameIP(const Oidx& id):
   MibLeaf(id, READONLY, new IpAddress(""), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=ifnameIP::ifnameIP
	//--AgentGen END

}

ifnameIP::~ifnameIP()
{

	//--AgentGen BEGIN=ifnameIP::~ifnameIP
	//--AgentGen END
}

MibEntryPtr ifnameIP::clone()
{
	MibEntryPtr other = new ifnameIP(oid);
	((ifnameIP*)other)->replace_value(value->clone());
	((ifnameIP*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameIP::clone
	//--AgentGen END
	return other;
}

void ifnameIP::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameIP::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameIP
//--AgentGen END




/**
 *  ifnameSubnet
 *
 */

ifnameSubnet::ifnameSubnet(const Oidx& id):
   MibLeaf(id, READONLY, new IpAddress("\xff\xff\xff"), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=ifnameSubnet::ifnameSubnet
	//--AgentGen END

}

ifnameSubnet::~ifnameSubnet()
{

	//--AgentGen BEGIN=ifnameSubnet::~ifnameSubnet
	//--AgentGen END
}

MibEntryPtr ifnameSubnet::clone()
{
	MibEntryPtr other = new ifnameSubnet(oid);
	((ifnameSubnet*)other)->replace_value(value->clone());
	((ifnameSubnet*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameSubnet::clone
	//--AgentGen END
	return other;
}

void ifnameSubnet::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameSubnet::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameSubnet
//--AgentGen END




/**
 *  ifnameMacAddress
 *
 */

ifnameMacAddress::ifnameMacAddress(const Oidx& id):
   MibLeaf(id, READONLY, new OctetStr())
{

	//--AgentGen BEGIN=ifnameMacAddress::ifnameMacAddress
	//--AgentGen END

}

ifnameMacAddress::~ifnameMacAddress()
{

	//--AgentGen BEGIN=ifnameMacAddress::~ifnameMacAddress
	//--AgentGen END
}

MibEntryPtr ifnameMacAddress::clone()
{
	MibEntryPtr other = new ifnameMacAddress(oid);
	((ifnameMacAddress*)other)->replace_value(value->clone());
	((ifnameMacAddress*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameMacAddress::clone
	//--AgentGen END
	return other;
}

void ifnameMacAddress::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameMacAddress::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameMacAddress
//--AgentGen END




/**
 *  ifnameGateway
 *
 */

ifnameGateway::ifnameGateway(const Oidx& id):
   MibLeaf(id, READONLY, new IpAddress("\xc0\xa8\x11"), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=ifnameGateway::ifnameGateway
	//--AgentGen END

}

ifnameGateway::~ifnameGateway()
{

	//--AgentGen BEGIN=ifnameGateway::~ifnameGateway
	//--AgentGen END
}

MibEntryPtr ifnameGateway::clone()
{
	MibEntryPtr other = new ifnameGateway(oid);
	((ifnameGateway*)other)->replace_value(value->clone());
	((ifnameGateway*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameGateway::clone
	//--AgentGen END
	return other;
}

void ifnameGateway::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameGateway::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameGateway
//--AgentGen END




/**
 *  ifnameDNS
 *
 */

ifnameDNS::ifnameDNS(const Oidx& id):
   MibLeaf(id, READONLY, new IpAddress("0.0.0.0"))
{

	//--AgentGen BEGIN=ifnameDNS::ifnameDNS
	//--AgentGen END

}

ifnameDNS::~ifnameDNS()
{

	//--AgentGen BEGIN=ifnameDNS::~ifnameDNS
	//--AgentGen END
}

MibEntryPtr ifnameDNS::clone()
{
	MibEntryPtr other = new ifnameDNS(oid);
	((ifnameDNS*)other)->replace_value(value->clone());
	((ifnameDNS*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=ifnameDNS::clone
	//--AgentGen END
	return other;
}

void ifnameDNS::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ifnameDNS::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=ifnameDNS
//--AgentGen END




/**
 *  vlanRowStatus
 *
 */

vlanRowStatus::vlanRowStatus(const Oidx& id):
   snmpRowStatus(id, READCREATE)
{

	//--AgentGen BEGIN=vlanRowStatus::vlanRowStatus
	//--AgentGen END

}

vlanRowStatus::~vlanRowStatus()
{

	//--AgentGen BEGIN=vlanRowStatus::~vlanRowStatus
	//--AgentGen END
}

MibEntryPtr vlanRowStatus::clone()
{
	MibEntryPtr other = new vlanRowStatus(oid);
	((vlanRowStatus*)other)->replace_value(value->clone());
	((vlanRowStatus*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=vlanRowStatus::clone
	//--AgentGen END
	return other;
}

long vlanRowStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void vlanRowStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int vlanRowStatus::set(const Vbx& vb)
{

	//--AgentGen BEGIN=vlanRowStatus::set
	//--AgentGen END
	return snmpRowStatus::set(vb);
}

int vlanRowStatus::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = snmpRowStatus::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=vlanRowStatus::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=vlanRowStatus
//--AgentGen END




/**
 *  vlanID
 *
 */

vlanID::vlanID(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=vlanID::vlanID
	//--AgentGen END

}

vlanID::~vlanID()
{

	//--AgentGen BEGIN=vlanID::~vlanID
	//--AgentGen END
}

MibEntryPtr vlanID::clone()
{
	MibEntryPtr other = new vlanID(oid);
	((vlanID*)other)->replace_value(value->clone());
	((vlanID*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=vlanID::clone
	//--AgentGen END
	return other;
}

void vlanID::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=vlanID::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long vlanID::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void vlanID::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=vlanID
//--AgentGen END




/**
 *  vlanIfname
 *
 */

vlanIfname::vlanIfname(const Oidx& id):
   SnmpDisplayString(id, READONLY, new OctetStr())
{

	//--AgentGen BEGIN=vlanIfname::vlanIfname
	//--AgentGen END

}

vlanIfname::~vlanIfname()
{

	//--AgentGen BEGIN=vlanIfname::~vlanIfname
	//--AgentGen END
}

MibEntryPtr vlanIfname::clone()
{
	MibEntryPtr other = new vlanIfname(oid);
	((vlanIfname*)other)->replace_value(value->clone());
	((vlanIfname*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=vlanIfname::clone
	//--AgentGen END
	return other;
}

void vlanIfname::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=vlanIfname::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=vlanIfname
//--AgentGen END




/**
 *  radioFirmware
 *
 */

radioFirmware* radioFirmware::instance = 0;

radioFirmware::radioFirmware():
   SnmpDisplayString(oidRadioFirmware, READONLY, new OctetStr())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioFirmware::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioFirmware.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioFirmware::radioFirmware
	//--AgentGen END

}

radioFirmware::~radioFirmware()
{

	//--AgentGen BEGIN=radioFirmware::~radioFirmware
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioFirmware::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioFirmware::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=radioFirmware
//--AgentGen END




/**
 *  radioBoardSN
 *
 */

radioBoardSN* radioBoardSN::instance = 0;

radioBoardSN::radioBoardSN():
   SnmpDisplayString(oidRadioBoardSN, READONLY, new OctetStr())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioBoardSN::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioBoardSN.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioBoardSN::radioBoardSN
	//--AgentGen END

}

radioBoardSN::~radioBoardSN()
{

	//--AgentGen BEGIN=radioBoardSN::~radioBoardSN
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioBoardSN::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioBoardSN::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=radioBoardSN
//--AgentGen END




/**
 *  radioTemperature
 *
 */

radioTemperature* radioTemperature::instance = 0;

radioTemperature::radioTemperature():
   MibLeaf(oidRadioTemperature, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioTemperature::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioTemperature.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioTemperature::radioTemperature
	//--AgentGen END

}

radioTemperature::~radioTemperature()
{

	//--AgentGen BEGIN=radioTemperature::~radioTemperature
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioTemperature::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioTemperature::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long radioTemperature::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void radioTemperature::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=radioTemperature
//--AgentGen END




/**
 *  radioAgcMode
 *
 */

radioAgcMode* radioAgcMode::instance = 0;

radioAgcMode::radioAgcMode():
   MibLeaf(oidRadioAgcMode, READONLY, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioAgcMode::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioAgcMode.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioAgcMode::radioAgcMode
	//--AgentGen END

}

radioAgcMode::~radioAgcMode()
{

	//--AgentGen BEGIN=radioAgcMode::~radioAgcMode
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioAgcMode::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioAgcMode::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long radioAgcMode::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void radioAgcMode::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=radioAgcMode
//--AgentGen END




/**
 *  radioIfout
 *
 */

radioIfout* radioIfout::instance = 0;

radioIfout::radioIfout():
   MibLeaf(oidRadioIfout, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioIfout::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioIfout.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioIfout::radioIfout
	//--AgentGen END

}

radioIfout::~radioIfout()
{

	//--AgentGen BEGIN=radioIfout::~radioIfout
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioIfout::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioIfout::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long radioIfout::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void radioIfout::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=radioIfout
//--AgentGen END




/**
 *  radioStatus
 *
 */

radioStatus* radioStatus::instance = 0;

radioStatus::radioStatus():
   MibLeaf(oidRadioStatus, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer radioStatus::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "radioStatus.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=radioStatus::radioStatus
	//--AgentGen END

}

radioStatus::~radioStatus()
{

	//--AgentGen BEGIN=radioStatus::~radioStatus
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void radioStatus::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=radioStatus::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long radioStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void radioStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=radioStatus
//--AgentGen END




/**
 *  bbFirmware
 *
 */

bbFirmware* bbFirmware::instance = 0;

bbFirmware::bbFirmware():
   SnmpDisplayString(oidBbFirmware, READONLY, new OctetStr())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbFirmware::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbFirmware.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbFirmware::bbFirmware
	//--AgentGen END

}

bbFirmware::~bbFirmware()
{

	//--AgentGen BEGIN=bbFirmware::~bbFirmware
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbFirmware::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbFirmware::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=bbFirmware
//--AgentGen END




/**
 *  bbFixedMCS
 *
 */

bbFixedMCS* bbFixedMCS::instance = 0;

bbFixedMCS::bbFixedMCS():
   MibLeaf(oidBbFixedMCS, READWRITE, new SnmpInt32(-1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbFixedMCS::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbFixedMCS.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbFixedMCS::bbFixedMCS
	//--AgentGen END

}

bbFixedMCS::~bbFixedMCS()
{

	//--AgentGen BEGIN=bbFixedMCS::~bbFixedMCS
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbFixedMCS::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbFixedMCS::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbFixedMCS::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbFixedMCS::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int bbFixedMCS::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbFixedMCS::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbFixedMCS::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != -1)
	     && (v != 0) && (v != 1)
	     && (v != 2) && (v != 3)
	     && (v != 4) && (v != 5)
	     && (v != 6) && (v != 7)
	     && (v != 8) && (v != 9)
	     && (v != 10) && (v != 11)
	     && (v != 12) && (v != 13)
	     && (v != 14)) return FALSE;

	//--AgentGen BEGIN=bbFixedMCS::value_ok
	//--AgentGen END
	return TRUE;
}

int bbFixedMCS::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbFixedMCS::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbFixedMCS
//--AgentGen END




/**
 *  bbMacAddress
 *
 */

bbMacAddress* bbMacAddress::instance = 0;

bbMacAddress::bbMacAddress():
   MibLeaf(oidBbMacAddress, READONLY, new OctetStr())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbMacAddress::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbMacAddress.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbMacAddress::bbMacAddress
	//--AgentGen END

}

bbMacAddress::~bbMacAddress()
{

	//--AgentGen BEGIN=bbMacAddress::~bbMacAddress
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbMacAddress::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbMacAddress::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=bbMacAddress
//--AgentGen END




/**
 *  bbTxPower
 *
 */

bbTxPower* bbTxPower::instance = 0;

bbTxPower::bbTxPower():
   MibLeaf(oidBbTxPower, READONLY, new Gauge32(6), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbTxPower::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbTxPower.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbTxPower::bbTxPower
	//--AgentGen END

}

bbTxPower::~bbTxPower()
{

	//--AgentGen BEGIN=bbTxPower::~bbTxPower
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbTxPower::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbTxPower::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long bbTxPower::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void bbTxPower::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}


//--AgentGen BEGIN=bbTxPower
//--AgentGen END




/**
 *  bbSignal
 *
 */

bbSignal* bbSignal::instance = 0;

bbSignal::bbSignal():
   MibLeaf(oidBbSignal, READONLY, new SnmpInt32(-101), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbSignal::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbSignal.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbSignal::bbSignal
	//--AgentGen END

}

bbSignal::~bbSignal()
{

	//--AgentGen BEGIN=bbSignal::~bbSignal
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbSignal::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbSignal::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbSignal::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbSignal::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbSignal
//--AgentGen END




/**
 *  bbNoise
 *
 */

bbNoise* bbNoise::instance = 0;

bbNoise::bbNoise():
   MibLeaf(oidBbNoise, READONLY, new SnmpInt32(-101), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbNoise::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbNoise.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbNoise::bbNoise
	//--AgentGen END

}

bbNoise::~bbNoise()
{

	//--AgentGen BEGIN=bbNoise::~bbNoise
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbNoise::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbNoise::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbNoise::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbNoise::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbNoise
//--AgentGen END




/**
 *  bbBandwidth
 *
 */

bbBandwidth* bbBandwidth::instance = 0;

bbBandwidth::bbBandwidth():
   MibLeaf(oidBbBandwidth, READONLY, new SnmpInt32(16), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbBandwidth::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbBandwidth.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbBandwidth::bbBandwidth
	//--AgentGen END

}

bbBandwidth::~bbBandwidth()
{

	//--AgentGen BEGIN=bbBandwidth::~bbBandwidth
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbBandwidth::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbBandwidth::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbBandwidth::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbBandwidth::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbBandwidth
//--AgentGen END




/**
 *  bbHandover
 *
 */

bbHandover* bbHandover::instance = 0;

bbHandover::bbHandover():
   MibLeaf(oidBbHandover, READONLY, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbHandover::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbHandover.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbHandover::bbHandover
	//--AgentGen END

}

bbHandover::~bbHandover()
{

	//--AgentGen BEGIN=bbHandover::~bbHandover
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbHandover::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbHandover::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbHandover::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbHandover::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbHandover
//--AgentGen END




/**
 *  bbStatus
 *
 */

bbStatus* bbStatus::instance = 0;

bbStatus::bbStatus():
   MibLeaf(oidBbStatus, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbStatus::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbStatus.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbStatus::bbStatus
	//--AgentGen END

}

bbStatus::~bbStatus()
{

	//--AgentGen BEGIN=bbStatus::~bbStatus
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbStatus::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbStatus::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbStatus
//--AgentGen END




/**
 *  assocCount
 *
 */

assocCount* assocCount::instance = 0;

assocCount::assocCount():
   MibLeaf(oidAssocCount, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer assocCount::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "assocCount.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=assocCount::assocCount
	//--AgentGen END

}

assocCount::~assocCount()
{

	//--AgentGen BEGIN=assocCount::~assocCount
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void assocCount::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=assocCount::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long assocCount::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void assocCount::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=assocCount
//--AgentGen END




/**
 *  staRowStatus
 *
 */

staRowStatus::staRowStatus(const Oidx& id):
   snmpRowStatus(id, READCREATE)
{

	//--AgentGen BEGIN=staRowStatus::staRowStatus
	//--AgentGen END

}

staRowStatus::~staRowStatus()
{

	//--AgentGen BEGIN=staRowStatus::~staRowStatus
	//--AgentGen END
}

MibEntryPtr staRowStatus::clone()
{
	MibEntryPtr other = new staRowStatus(oid);
	((staRowStatus*)other)->replace_value(value->clone());
	((staRowStatus*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staRowStatus::clone
	//--AgentGen END
	return other;
}

long staRowStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staRowStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int staRowStatus::set(const Vbx& vb)
{

	//--AgentGen BEGIN=staRowStatus::set
	//--AgentGen END
	return snmpRowStatus::set(vb);
}

int staRowStatus::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = snmpRowStatus::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=staRowStatus::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=staRowStatus
//--AgentGen END




/**
 *  staMacAddress
 *
 */

staMacAddress::staMacAddress(const Oidx& id):
   MibLeaf(id, READONLY, new OctetStr())
{

	//--AgentGen BEGIN=staMacAddress::staMacAddress
	//--AgentGen END

}

staMacAddress::~staMacAddress()
{

	//--AgentGen BEGIN=staMacAddress::~staMacAddress
	//--AgentGen END
}

MibEntryPtr staMacAddress::clone()
{
	MibEntryPtr other = new staMacAddress(oid);
	((staMacAddress*)other)->replace_value(value->clone());
	((staMacAddress*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staMacAddress::clone
	//--AgentGen END
	return other;
}

void staMacAddress::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staMacAddress::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=staMacAddress
//--AgentGen END




/**
 *  staSignal
 *
 */

staSignal::staSignal(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staSignal::staSignal
	//--AgentGen END

}

staSignal::~staSignal()
{

	//--AgentGen BEGIN=staSignal::~staSignal
	//--AgentGen END
}

MibEntryPtr staSignal::clone()
{
	MibEntryPtr other = new staSignal(oid);
	((staSignal*)other)->replace_value(value->clone());
	((staSignal*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staSignal::clone
	//--AgentGen END
	return other;
}

void staSignal::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staSignal::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staSignal::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staSignal::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staSignal
//--AgentGen END




/**
 *  staNoise
 *
 */

staNoise::staNoise(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staNoise::staNoise
	//--AgentGen END

}

staNoise::~staNoise()
{

	//--AgentGen BEGIN=staNoise::~staNoise
	//--AgentGen END
}

MibEntryPtr staNoise::clone()
{
	MibEntryPtr other = new staNoise(oid);
	((staNoise*)other)->replace_value(value->clone());
	((staNoise*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staNoise::clone
	//--AgentGen END
	return other;
}

void staNoise::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staNoise::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staNoise::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staNoise::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staNoise
//--AgentGen END




/**
 *  staSNR
 *
 */

staSNR::staSNR(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staSNR::staSNR
	//--AgentGen END

}

staSNR::~staSNR()
{

	//--AgentGen BEGIN=staSNR::~staSNR
	//--AgentGen END
}

MibEntryPtr staSNR::clone()
{
	MibEntryPtr other = new staSNR(oid);
	((staSNR*)other)->replace_value(value->clone());
	((staSNR*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staSNR::clone
	//--AgentGen END
	return other;
}

void staSNR::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staSNR::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staSNR::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staSNR::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staSNR
//--AgentGen END




/**
 *  staRxRate
 *
 */

staRxRate::staRxRate(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staRxRate::staRxRate
	//--AgentGen END

}

staRxRate::~staRxRate()
{

	//--AgentGen BEGIN=staRxRate::~staRxRate
	//--AgentGen END
}

MibEntryPtr staRxRate::clone()
{
	MibEntryPtr other = new staRxRate(oid);
	((staRxRate*)other)->replace_value(value->clone());
	((staRxRate*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staRxRate::clone
	//--AgentGen END
	return other;
}

void staRxRate::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staRxRate::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staRxRate::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staRxRate::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staRxRate
//--AgentGen END




/**
 *  staTxRate
 *
 */

staTxRate::staTxRate(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staTxRate::staTxRate
	//--AgentGen END

}

staTxRate::~staTxRate()
{

	//--AgentGen BEGIN=staTxRate::~staTxRate
	//--AgentGen END
}

MibEntryPtr staTxRate::clone()
{
	MibEntryPtr other = new staTxRate(oid);
	((staTxRate*)other)->replace_value(value->clone());
	((staTxRate*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staTxRate::clone
	//--AgentGen END
	return other;
}

void staTxRate::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staTxRate::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staTxRate::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staTxRate::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staTxRate
//--AgentGen END




/**
 *  staQLoad
 *
 */

staQLoad::staQLoad(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staQLoad::staQLoad
	//--AgentGen END

}

staQLoad::~staQLoad()
{

	//--AgentGen BEGIN=staQLoad::~staQLoad
	//--AgentGen END
}

MibEntryPtr staQLoad::clone()
{
	MibEntryPtr other = new staQLoad(oid);
	((staQLoad*)other)->replace_value(value->clone());
	((staQLoad*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staQLoad::clone
	//--AgentGen END
	return other;
}

void staQLoad::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staQLoad::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staQLoad::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staQLoad::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staQLoad
//--AgentGen END




/**
 *  staRxMcs
 *
 */

staRxMcs::staRxMcs(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staRxMcs::staRxMcs
	//--AgentGen END

}

staRxMcs::~staRxMcs()
{

	//--AgentGen BEGIN=staRxMcs::~staRxMcs
	//--AgentGen END
}

MibEntryPtr staRxMcs::clone()
{
	MibEntryPtr other = new staRxMcs(oid);
	((staRxMcs*)other)->replace_value(value->clone());
	((staRxMcs*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staRxMcs::clone
	//--AgentGen END
	return other;
}

void staRxMcs::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staRxMcs::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staRxMcs::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staRxMcs::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staRxMcs
//--AgentGen END




/**
 *  staTxMcs
 *
 */

staTxMcs::staTxMcs(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32())
{

	//--AgentGen BEGIN=staTxMcs::staTxMcs
	//--AgentGen END

}

staTxMcs::~staTxMcs()
{

	//--AgentGen BEGIN=staTxMcs::~staTxMcs
	//--AgentGen END
}

MibEntryPtr staTxMcs::clone()
{
	MibEntryPtr other = new staTxMcs(oid);
	((staTxMcs*)other)->replace_value(value->clone());
	((staTxMcs*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staTxMcs::clone
	//--AgentGen END
	return other;
}

void staTxMcs::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staTxMcs::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long staTxMcs::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void staTxMcs::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=staTxMcs
//--AgentGen END




/**
 *  staOnlineTime
 *
 */

staOnlineTime::staOnlineTime(const Oidx& id):
   SnmpDisplayString(id, READONLY, new OctetStr("0"), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=staOnlineTime::staOnlineTime
	//--AgentGen END

}

staOnlineTime::~staOnlineTime()
{

	//--AgentGen BEGIN=staOnlineTime::~staOnlineTime
	//--AgentGen END
}

MibEntryPtr staOnlineTime::clone()
{
	MibEntryPtr other = new staOnlineTime(oid);
	((staOnlineTime*)other)->replace_value(value->clone());
	((staOnlineTime*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=staOnlineTime::clone
	//--AgentGen END
	return other;
}

void staOnlineTime::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=staOnlineTime::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=staOnlineTime
//--AgentGen END




/**
 *  routeRowStatus
 *
 */

routeRowStatus::routeRowStatus(const Oidx& id):
   snmpRowStatus(id, READCREATE)
{

	//--AgentGen BEGIN=routeRowStatus::routeRowStatus
	//--AgentGen END

}

routeRowStatus::~routeRowStatus()
{

	//--AgentGen BEGIN=routeRowStatus::~routeRowStatus
	//--AgentGen END
}

MibEntryPtr routeRowStatus::clone()
{
	MibEntryPtr other = new routeRowStatus(oid);
	((routeRowStatus*)other)->replace_value(value->clone());
	((routeRowStatus*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeRowStatus::clone
	//--AgentGen END
	return other;
}

long routeRowStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void routeRowStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int routeRowStatus::set(const Vbx& vb)
{

	//--AgentGen BEGIN=routeRowStatus::set
	//--AgentGen END
	return snmpRowStatus::set(vb);
}

int routeRowStatus::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = snmpRowStatus::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=routeRowStatus::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=routeRowStatus
//--AgentGen END




/**
 *  routeDestination
 *
 */

routeDestination::routeDestination(const Oidx& id):
   MibLeaf(id, READONLY, new OctetStr())
{

	//--AgentGen BEGIN=routeDestination::routeDestination
	//--AgentGen END

}

routeDestination::~routeDestination()
{

	//--AgentGen BEGIN=routeDestination::~routeDestination
	//--AgentGen END
}

MibEntryPtr routeDestination::clone()
{
	MibEntryPtr other = new routeDestination(oid);
	((routeDestination*)other)->replace_value(value->clone());
	((routeDestination*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeDestination::clone
	//--AgentGen END
	return other;
}

void routeDestination::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=routeDestination::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=routeDestination
//--AgentGen END




/**
 *  routeNextHop
 *
 */

routeNextHop::routeNextHop(const Oidx& id):
   MibLeaf(id, READONLY, new OctetStr())
{

	//--AgentGen BEGIN=routeNextHop::routeNextHop
	//--AgentGen END

}

routeNextHop::~routeNextHop()
{

	//--AgentGen BEGIN=routeNextHop::~routeNextHop
	//--AgentGen END
}

MibEntryPtr routeNextHop::clone()
{
	MibEntryPtr other = new routeNextHop(oid);
	((routeNextHop*)other)->replace_value(value->clone());
	((routeNextHop*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeNextHop::clone
	//--AgentGen END
	return other;
}

void routeNextHop::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=routeNextHop::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}


//--AgentGen BEGIN=routeNextHop
//--AgentGen END




/**
 *  routeMetric
 *
 */

routeMetric::routeMetric(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=routeMetric::routeMetric
	//--AgentGen END

}

routeMetric::~routeMetric()
{

	//--AgentGen BEGIN=routeMetric::~routeMetric
	//--AgentGen END
}

MibEntryPtr routeMetric::clone()
{
	MibEntryPtr other = new routeMetric(oid);
	((routeMetric*)other)->replace_value(value->clone());
	((routeMetric*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeMetric::clone
	//--AgentGen END
	return other;
}

void routeMetric::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=routeMetric::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long routeMetric::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void routeMetric::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=routeMetric
//--AgentGen END




/**
 *  routeFlags
 *
 */

routeFlags::routeFlags(const Oidx& id):
   MibLeaf(id, READONLY, new Gauge32(0), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=routeFlags::routeFlags
	//--AgentGen END

}

routeFlags::~routeFlags()
{

	//--AgentGen BEGIN=routeFlags::~routeFlags
	//--AgentGen END
}

MibEntryPtr routeFlags::clone()
{
	MibEntryPtr other = new routeFlags(oid);
	((routeFlags*)other)->replace_value(value->clone());
	((routeFlags*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeFlags::clone
	//--AgentGen END
	return other;
}

void routeFlags::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=routeFlags::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long routeFlags::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void routeFlags::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}


//--AgentGen BEGIN=routeFlags
//--AgentGen END




/**
 *  routeExpiredTime
 *
 */

routeExpiredTime::routeExpiredTime(const Oidx& id):
   MibLeaf(id, READONLY, new SnmpInt32(5000), VMODE_DEFAULT)
{

	//--AgentGen BEGIN=routeExpiredTime::routeExpiredTime
	//--AgentGen END

}

routeExpiredTime::~routeExpiredTime()
{

	//--AgentGen BEGIN=routeExpiredTime::~routeExpiredTime
	//--AgentGen END
}

MibEntryPtr routeExpiredTime::clone()
{
	MibEntryPtr other = new routeExpiredTime(oid);
	((routeExpiredTime*)other)->replace_value(value->clone());
	((routeExpiredTime*)other)->set_reference_to_table(my_table);

	//--AgentGen BEGIN=routeExpiredTime::clone
	//--AgentGen END
	return other;
}

void routeExpiredTime::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=routeExpiredTime::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long routeExpiredTime::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void routeExpiredTime::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=routeExpiredTime
//--AgentGen END




/**
 *  bbSSID
 *
 */

bbSSID* bbSSID::instance = 0;

bbSSID::bbSSID():
   SnmpDisplayString(oidBbSSID, READWRITE, new OctetStr("gws2000"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbSSID::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbSSID.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbSSID::bbSSID
	//--AgentGen END

}

bbSSID::~bbSSID()
{

	//--AgentGen BEGIN=bbSSID::~bbSSID
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbSSID::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbSSID::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

int bbSSID::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbSSID::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbSSID::value_ok(const Vbx& vb)
{

	//--AgentGen BEGIN=bbSSID::value_ok
	//--AgentGen END
	return TRUE;
}

int bbSSID::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = SnmpDisplayString::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbSSID::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbSSID
//--AgentGen END




/**
 *  bbMESHID
 *
 */

bbMESHID* bbMESHID::instance = 0;

bbMESHID::bbMESHID():
   SnmpDisplayString(oidBbMESHID, READWRITE, new OctetStr("gwsmesh2015"), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbMESHID::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbMESHID.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbMESHID::bbMESHID
	//--AgentGen END

}

bbMESHID::~bbMESHID()
{

	//--AgentGen BEGIN=bbMESHID::~bbMESHID
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbMESHID::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbMESHID::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

int bbMESHID::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbMESHID::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbMESHID::value_ok(const Vbx& vb)
{

	//--AgentGen BEGIN=bbMESHID::value_ok
	//--AgentGen END
	return TRUE;
}

int bbMESHID::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = SnmpDisplayString::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbMESHID::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbMESHID
//--AgentGen END




/**
 *  bbEncryption
 *
 */

bbEncryption* bbEncryption::instance = 0;

bbEncryption::bbEncryption():
   MibLeaf(oidBbEncryption, READWRITE, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbEncryption::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbEncryption.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbEncryption::bbEncryption
	//--AgentGen END

}

bbEncryption::~bbEncryption()
{

	//--AgentGen BEGIN=bbEncryption::~bbEncryption
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbEncryption::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbEncryption::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbEncryption::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbEncryption::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int bbEncryption::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbEncryption::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbEncryption::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2) && (v != 0)
	    ) return FALSE;

	//--AgentGen BEGIN=bbEncryption::value_ok
	//--AgentGen END
	return TRUE;
}

int bbEncryption::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbEncryption::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbEncryption
//--AgentGen END




/**
 *  bbProtocol
 *
 */

bbProtocol* bbProtocol::instance = 0;

bbProtocol::bbProtocol():
   MibLeaf(oidBbProtocol, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbProtocol::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbProtocol.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbProtocol::bbProtocol
	//--AgentGen END

}

bbProtocol::~bbProtocol()
{

	//--AgentGen BEGIN=bbProtocol::~bbProtocol
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbProtocol::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbProtocol::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbProtocol::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbProtocol::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int bbProtocol::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbProtocol::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbProtocol::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=bbProtocol::value_ok
	//--AgentGen END
	return TRUE;
}

int bbProtocol::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbProtocol::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbProtocol
//--AgentGen END




/**
 *  bbHT20
 *
 */

bbHT20* bbHT20::instance = 0;

bbHT20::bbHT20():
   MibLeaf(oidBbHT20, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbHT20::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbHT20.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbHT20::bbHT20
	//--AgentGen END

}

bbHT20::~bbHT20()
{

	//--AgentGen BEGIN=bbHT20::~bbHT20
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbHT20::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbHT20::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbHT20::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbHT20::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int bbHT20::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbHT20::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbHT20::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=bbHT20::value_ok
	//--AgentGen END
	return TRUE;
}

int bbHT20::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbHT20::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbHT20
//--AgentGen END




/**
 *  bbHT20SGI
 *
 */

bbHT20SGI* bbHT20SGI::instance = 0;

bbHT20SGI::bbHT20SGI():
   MibLeaf(oidBbHT20SGI, READONLY, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbHT20SGI::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbHT20SGI.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbHT20SGI::bbHT20SGI
	//--AgentGen END

}

bbHT20SGI::~bbHT20SGI()
{

	//--AgentGen BEGIN=bbHT20SGI::~bbHT20SGI
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbHT20SGI::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbHT20SGI::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbHT20SGI::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbHT20SGI::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=bbHT20SGI
//--AgentGen END




/**
 *  bbOptMode
 *
 */

bbOptMode* bbOptMode::instance = 0;

bbOptMode::bbOptMode():
   MibLeaf(oidBbOptMode, READWRITE, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer bbOptMode::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "bbOptMode.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=bbOptMode::bbOptMode
	//--AgentGen END

}

bbOptMode::~bbOptMode()
{

	//--AgentGen BEGIN=bbOptMode::~bbOptMode
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void bbOptMode::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=bbOptMode::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long bbOptMode::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void bbOptMode::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int bbOptMode::set(const Vbx& vb)
{

	//--AgentGen BEGIN=bbOptMode::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean bbOptMode::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 0)
	     && (v != 1) && (v != 2)
	    ) return FALSE;

	//--AgentGen BEGIN=bbOptMode::value_ok
	//--AgentGen END
	return TRUE;
}

int bbOptMode::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=bbOptMode::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=bbOptMode
//--AgentGen END




/**
 *  uhfRegion
 *
 */

uhfRegion* uhfRegion::instance = 0;

uhfRegion::uhfRegion():
   MibLeaf(oidUhfRegion, READWRITE, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfRegion::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfRegion.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfRegion::uhfRegion
	//--AgentGen END

}

uhfRegion::~uhfRegion()
{

	//--AgentGen BEGIN=uhfRegion::~uhfRegion
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfRegion::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfRegion::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long uhfRegion::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void uhfRegion::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int uhfRegion::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfRegion::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfRegion::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 0)
	     && (v != 1)) return FALSE;

	//--AgentGen BEGIN=uhfRegion::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfRegion::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfRegion::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfRegion
//--AgentGen END




/**
 *  uhfChannel
 *
 */

uhfChannel* uhfChannel::instance = 0;

uhfChannel::uhfChannel():
   MibLeaf(oidUhfChannel, READWRITE, new Gauge32(14), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfChannel::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfChannel.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfChannel::uhfChannel
	//--AgentGen END

}

uhfChannel::~uhfChannel()
{

	//--AgentGen BEGIN=uhfChannel::~uhfChannel
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfChannel::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfChannel::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long uhfChannel::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void uhfChannel::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}

int uhfChannel::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfChannel::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfChannel::value_ok(const Vbx& vb)
{
	unsigned long v;
	vb.get_value(v);
	if (!(((v >= 14) && (v <= 60))))
		 return FALSE;

	//--AgentGen BEGIN=uhfChannel::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfChannel::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfChannel::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfChannel
//--AgentGen END




/**
 *  uhfTxOnOff
 *
 */

uhfTxOnOff* uhfTxOnOff::instance = 0;

uhfTxOnOff::uhfTxOnOff():
   MibLeaf(oidUhfTxOnOff, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfTxOnOff::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfTxOnOff.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfTxOnOff::uhfTxOnOff
	//--AgentGen END

}

uhfTxOnOff::~uhfTxOnOff()
{

	//--AgentGen BEGIN=uhfTxOnOff::~uhfTxOnOff
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfTxOnOff::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfTxOnOff::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long uhfTxOnOff::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void uhfTxOnOff::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int uhfTxOnOff::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfTxOnOff::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfTxOnOff::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=uhfTxOnOff::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfTxOnOff::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfTxOnOff::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfTxOnOff
//--AgentGen END




/**
 *  uhfTxPower
 *
 */

uhfTxPower* uhfTxPower::instance = 0;

uhfTxPower::uhfTxPower():
   MibLeaf(oidUhfTxPower, READWRITE, new Gauge32(14), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfTxPower::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfTxPower.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfTxPower::uhfTxPower
	//--AgentGen END

}

uhfTxPower::~uhfTxPower()
{

	//--AgentGen BEGIN=uhfTxPower::~uhfTxPower
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfTxPower::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfTxPower::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long uhfTxPower::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void uhfTxPower::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}

int uhfTxPower::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfTxPower::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfTxPower::value_ok(const Vbx& vb)
{
	unsigned long v;
	vb.get_value(v);
	if (!(((v >= 0) && (v <= 4294967295))))
		 return FALSE;

	//--AgentGen BEGIN=uhfTxPower::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfTxPower::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfTxPower::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfTxPower
//--AgentGen END




/**
 *  uhfTxAutoCal
 *
 */

uhfTxAutoCal* uhfTxAutoCal::instance = 0;

uhfTxAutoCal::uhfTxAutoCal():
   MibLeaf(oidUhfTxAutoCal, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfTxAutoCal::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfTxAutoCal.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfTxAutoCal::uhfTxAutoCal
	//--AgentGen END

}

uhfTxAutoCal::~uhfTxAutoCal()
{

	//--AgentGen BEGIN=uhfTxAutoCal::~uhfTxAutoCal
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfTxAutoCal::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfTxAutoCal::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long uhfTxAutoCal::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void uhfTxAutoCal::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int uhfTxAutoCal::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfTxAutoCal::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfTxAutoCal::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=uhfTxAutoCal::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfTxAutoCal::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfTxAutoCal::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfTxAutoCal
//--AgentGen END




/**
 *  uhfRxOnOff
 *
 */

uhfRxOnOff* uhfRxOnOff::instance = 0;

uhfRxOnOff::uhfRxOnOff():
   MibLeaf(oidUhfRxOnOff, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfRxOnOff::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfRxOnOff.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfRxOnOff::uhfRxOnOff
	//--AgentGen END

}

uhfRxOnOff::~uhfRxOnOff()
{

	//--AgentGen BEGIN=uhfRxOnOff::~uhfRxOnOff
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfRxOnOff::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfRxOnOff::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long uhfRxOnOff::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void uhfRxOnOff::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int uhfRxOnOff::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfRxOnOff::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfRxOnOff::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=uhfRxOnOff::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfRxOnOff::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfRxOnOff::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfRxOnOff
//--AgentGen END




/**
 *  uhfRxGain
 *
 */

uhfRxGain* uhfRxGain::instance = 0;

uhfRxGain::uhfRxGain():
   MibLeaf(oidUhfRxGain, READWRITE, new Gauge32(12), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfRxGain::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfRxGain.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfRxGain::uhfRxGain
	//--AgentGen END

}

uhfRxGain::~uhfRxGain()
{

	//--AgentGen BEGIN=uhfRxGain::~uhfRxGain
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfRxGain::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfRxGain::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long uhfRxGain::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void uhfRxGain::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}

int uhfRxGain::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfRxGain::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfRxGain::value_ok(const Vbx& vb)
{
	unsigned long v;
	vb.get_value(v);
	if (!(((v >= 0) && (v <= 4294967295))))
		 return FALSE;

	//--AgentGen BEGIN=uhfRxGain::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfRxGain::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfRxGain::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfRxGain
//--AgentGen END




/**
 *  uhfRxAutoCal
 *
 */

uhfRxAutoCal* uhfRxAutoCal::instance = 0;

uhfRxAutoCal::uhfRxAutoCal():
   MibLeaf(oidUhfRxAutoCal, READWRITE, new SnmpInt32(1), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer uhfRxAutoCal::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "uhfRxAutoCal.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=uhfRxAutoCal::uhfRxAutoCal
	//--AgentGen END

}

uhfRxAutoCal::~uhfRxAutoCal()
{

	//--AgentGen BEGIN=uhfRxAutoCal::~uhfRxAutoCal
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void uhfRxAutoCal::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=uhfRxAutoCal::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long uhfRxAutoCal::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void uhfRxAutoCal::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int uhfRxAutoCal::set(const Vbx& vb)
{

	//--AgentGen BEGIN=uhfRxAutoCal::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean uhfRxAutoCal::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=uhfRxAutoCal::value_ok
	//--AgentGen END
	return TRUE;
}

int uhfRxAutoCal::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=uhfRxAutoCal::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=uhfRxAutoCal
//--AgentGen END




/**
 *  scanChannel
 *
 */

scanChannel* scanChannel::instance = 0;

scanChannel::scanChannel():
   MibLeaf(oidScanChannel, READWRITE, new Gauge32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer scanChannel::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "scanChannel.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=scanChannel::scanChannel
	//--AgentGen END

}

scanChannel::~scanChannel()
{

	//--AgentGen BEGIN=scanChannel::~scanChannel
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void scanChannel::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=scanChannel::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long scanChannel::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void scanChannel::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}

int scanChannel::set(const Vbx& vb)
{

	//--AgentGen BEGIN=scanChannel::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean scanChannel::value_ok(const Vbx& vb)
{
	unsigned long v;
	vb.get_value(v);
	if (!(((v >= 0) && (v <= 60))))
		 return FALSE;

	//--AgentGen BEGIN=scanChannel::value_ok
	//--AgentGen END
	return TRUE;
}

int scanChannel::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=scanChannel::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=scanChannel
//--AgentGen END




/**
 *  scanTimer
 *
 */

scanTimer* scanTimer::instance = 0;

scanTimer::scanTimer():
   MibLeaf(oidScanTimer, READWRITE, new Gauge32(60), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer scanTimer::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "scanTimer.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=scanTimer::scanTimer
	//--AgentGen END

}

scanTimer::~scanTimer()
{

	//--AgentGen BEGIN=scanTimer::~scanTimer
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void scanTimer::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=scanTimer::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

unsigned long scanTimer::get_state()
{
	return (unsigned long)*((Gauge32*)value);
}

void scanTimer::set_state(unsigned long l)
{
	*((Gauge32*)value) = l;
}

int scanTimer::set(const Vbx& vb)
{

	//--AgentGen BEGIN=scanTimer::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean scanTimer::value_ok(const Vbx& vb)
{
	unsigned long v;
	vb.get_value(v);
	if (!(((v >= 0) && (v <= 900))))
		 return FALSE;

	//--AgentGen BEGIN=scanTimer::value_ok
	//--AgentGen END
	return TRUE;
}

int scanTimer::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=scanTimer::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=scanTimer
//--AgentGen END




/**
 *  scanTrigger
 *
 */

scanTrigger* scanTrigger::instance = 0;

scanTrigger::scanTrigger():
   MibLeaf(oidScanTrigger, READWRITE, new SnmpInt32(2), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer scanTrigger::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "scanTrigger.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=scanTrigger::scanTrigger
	//--AgentGen END

}

scanTrigger::~scanTrigger()
{

	//--AgentGen BEGIN=scanTrigger::~scanTrigger
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void scanTrigger::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=scanTrigger::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long scanTrigger::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void scanTrigger::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}

int scanTrigger::set(const Vbx& vb)
{

	//--AgentGen BEGIN=scanTrigger::set
	//--AgentGen END
	return MibLeaf::set(vb);
}

boolean scanTrigger::value_ok(const Vbx& vb)
{
	long v;
	vb.get_value(v);
	if ((v != 1)
	     && (v != 2)) return FALSE;

	//--AgentGen BEGIN=scanTrigger::value_ok
	//--AgentGen END
	return TRUE;
}

int scanTrigger::prepare_set_request(Request* req, int& ind)
{
	int status;
	if ((status = MibLeaf::prepare_set_request(req, ind)) !=
	    SNMP_ERROR_SUCCESS) return status;

	//--AgentGen BEGIN=scanTrigger::prepare_set_request
	//--AgentGen END
	return SNMP_ERROR_SUCCESS;
}


//--AgentGen BEGIN=scanTrigger
//--AgentGen END




/**
 *  gpsLongitude
 *
 */

gpsLongitude* gpsLongitude::instance = 0;

gpsLongitude::gpsLongitude():
   MibLeaf(oidGpsLongitude, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer gpsLongitude::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "gpsLongitude.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=gpsLongitude::gpsLongitude
	//--AgentGen END

}

gpsLongitude::~gpsLongitude()
{

	//--AgentGen BEGIN=gpsLongitude::~gpsLongitude
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void gpsLongitude::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=gpsLongitude::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long gpsLongitude::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void gpsLongitude::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=gpsLongitude
//--AgentGen END




/**
 *  gpsLatitude
 *
 */

gpsLatitude* gpsLatitude::instance = 0;

gpsLatitude::gpsLatitude():
   MibLeaf(oidGpsLatitude, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer gpsLatitude::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "gpsLatitude.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=gpsLatitude::gpsLatitude
	//--AgentGen END

}

gpsLatitude::~gpsLatitude()
{

	//--AgentGen BEGIN=gpsLatitude::~gpsLatitude
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void gpsLatitude::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=gpsLatitude::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long gpsLatitude::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void gpsLatitude::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=gpsLatitude
//--AgentGen END




/**
 *  gpsSpeed
 *
 */

gpsSpeed* gpsSpeed::instance = 0;

gpsSpeed::gpsSpeed():
   MibLeaf(oidGpsSpeed, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer gpsSpeed::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "gpsSpeed.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=gpsSpeed::gpsSpeed
	//--AgentGen END

}

gpsSpeed::~gpsSpeed()
{

	//--AgentGen BEGIN=gpsSpeed::~gpsSpeed
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void gpsSpeed::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=gpsSpeed::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long gpsSpeed::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void gpsSpeed::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=gpsSpeed
//--AgentGen END




/**
 *  gpsStatus
 *
 */

gpsStatus* gpsStatus::instance = 0;

gpsStatus::gpsStatus():
   MibLeaf(oidGpsStatus, READONLY, new SnmpInt32(0), VMODE_DEFAULT)
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer gpsStatus::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "gpsStatus.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=gpsStatus::gpsStatus
	//--AgentGen END

}

gpsStatus::~gpsStatus()
{

	//--AgentGen BEGIN=gpsStatus::~gpsStatus
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void gpsStatus::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=gpsStatus::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long gpsStatus::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void gpsStatus::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=gpsStatus
//--AgentGen END




/**
 *  dlThroughput
 *
 */

dlThroughput* dlThroughput::instance = 0;

dlThroughput::dlThroughput():
   MibLeaf(oidDlThroughput, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer dlThroughput::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "dlThroughput.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=dlThroughput::dlThroughput
	//--AgentGen END

}

dlThroughput::~dlThroughput()
{

	//--AgentGen BEGIN=dlThroughput::~dlThroughput
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void dlThroughput::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=dlThroughput::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long dlThroughput::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void dlThroughput::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=dlThroughput
//--AgentGen END




/**
 *  ulThroughput
 *
 */

ulThroughput* ulThroughput::instance = 0;

ulThroughput::ulThroughput():
   MibLeaf(oidUlThroughput, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer ulThroughput::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "ulThroughput.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=ulThroughput::ulThroughput
	//--AgentGen END

}

ulThroughput::~ulThroughput()
{

	//--AgentGen BEGIN=ulThroughput::~ulThroughput
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void ulThroughput::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=ulThroughput::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long ulThroughput::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void ulThroughput::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=ulThroughput
//--AgentGen END




/**
 *  usageCPU
 *
 */

usageCPU* usageCPU::instance = 0;

usageCPU::usageCPU():
   MibLeaf(oidUsageCPU, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer usageCPU::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "usageCPU.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=usageCPU::usageCPU
	//--AgentGen END

}

usageCPU::~usageCPU()
{

	//--AgentGen BEGIN=usageCPU::~usageCPU
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void usageCPU::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=usageCPU::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long usageCPU::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void usageCPU::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=usageCPU
//--AgentGen END




/**
 *  usageMem
 *
 */

usageMem* usageMem::instance = 0;

usageMem::usageMem():
   MibLeaf(oidUsageMem, READONLY, new SnmpInt32())
{
	// This leaf object is a singleton. In order to access it use
	// the static pointer usageMem::instance.
	instance = this;

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "usageMem.leaf");

	load_from_file(path);

	//--AgentGen BEGIN=usageMem::usageMem
	//--AgentGen END

}

usageMem::~usageMem()
{

	//--AgentGen BEGIN=usageMem::~usageMem
	//--AgentGen END
	save_to_file(path);
	delete path;
}

void usageMem::get_request(Request* req, int ind)
{

	//--AgentGen BEGIN=usageMem::get_request
	//--AgentGen END
	MibLeaf::get_request(req, ind);
}

long usageMem::get_state()
{
	return (long)*((SnmpInt32*)value);
}

void usageMem::set_state(long l)
{
	*((SnmpInt32*)value) = l;
}


//--AgentGen BEGIN=usageMem
//--AgentGen END


#ifdef _SNMPv3



/**
 *  hwBoardEvent
 *
 */

hwBoardEvent::hwBoardEvent(): NotificationOriginator()
{

	//--AgentGen BEGIN=hwBoardEvent::hwBoardEvent
	//--AgentGen END
}

hwBoardEvent::~hwBoardEvent()
{

	//--AgentGen BEGIN=hwBoardEvent::~hwBoardEvent
	//--AgentGen END
}

void hwBoardEvent::generate(Vbx* vbs, int sz, const OctetStr& context)
{

	//--AgentGen BEGIN=hwBoardEvent::generate
	//--AgentGen END
	if (sz < 3) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("hwBoardEvent: too few var binds (given) (expected)");
		LOG(sz);
		LOG(3);
		LOG_END;
		return;
	}
	if (!(vbs[0].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.4.1.7"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("hwBoardEvent: wrong var bind (no.) (given) (expected)");
		LOG(1l);
		LOG(vbs[0].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.4.1.7");
		LOG_END;
		return;
	}
	if (!(vbs[1].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.4.2.9"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("hwBoardEvent: wrong var bind (no.) (given) (expected)");
		LOG(2l);
		LOG(vbs[1].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.4.2.9");
		LOG_END;
		return;
	}
	if (!(vbs[2].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.6.2"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("hwBoardEvent: wrong var bind (no.) (given) (expected)");
		LOG(3l);
		LOG(vbs[2].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.6.2");
		LOG_END;
		return;
	}
	NotificationOriginator::generate(vbs, sz, oidHwBoardEvent, "", context);
}


//--AgentGen BEGIN=hwBoardEvent
//--AgentGen END
#endif

#ifdef _SNMPv3



/**
 *  swKeyParameters
 *
 */

swKeyParameters::swKeyParameters(): NotificationOriginator()
{

	//--AgentGen BEGIN=swKeyParameters::swKeyParameters
	//--AgentGen END
}

swKeyParameters::~swKeyParameters()
{

	//--AgentGen BEGIN=swKeyParameters::~swKeyParameters
	//--AgentGen END
}

void swKeyParameters::generate(Vbx* vbs, int sz, const OctetStr& context)
{

	//--AgentGen BEGIN=swKeyParameters::generate
	//--AgentGen END
	if (sz < 6) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: too few var binds (given) (expected)");
		LOG(sz);
		LOG(6);
		LOG_END;
		return;
	}
	if (!(vbs[0].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.6.1.2"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(1l);
		LOG(vbs[0].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.6.1.2");
		LOG_END;
		return;
	}
	if (!(vbs[1].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.6.1.1"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(2l);
		LOG(vbs[1].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.6.1.1");
		LOG_END;
		return;
	}
	if (!(vbs[2].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.6.1.3"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(3l);
		LOG(vbs[2].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.6.1.3");
		LOG_END;
		return;
	}
	if (!(vbs[3].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.4.2.11"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(4l);
		LOG(vbs[3].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.4.2.11");
		LOG_END;
		return;
	}
	if (!(vbs[4].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.4.2.5"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(5l);
		LOG(vbs[4].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.4.2.5");
		LOG_END;
		return;
	}
	if (!(vbs[5].get_oid().in_subtree_of("1.3.6.1.4.1.46002.2.4.2.6"))) {
		LOG_BEGIN(ERROR_LOG | 1);
		LOG("swKeyParameters: wrong var bind (no.) (given) (expected)");
		LOG(6l);
		LOG(vbs[5].get_printable_oid());
		LOG("1.3.6.1.4.1.46002.2.4.2.6");
		LOG_END;
		return;
	}
	NotificationOriginator::generate(vbs, sz, oidSwKeyParameters, "", context);
}


//--AgentGen BEGIN=swKeyParameters
//--AgentGen END
#endif



/**
 *  ifnameEntry
 *
 */

ifnameEntry* ifnameEntry::instance = 0;

const index_info indIfnameEntry[1] = {
	{ sNMP_SYNTAX_INT, FALSE, 1, 1 } };

ifnameEntry::ifnameEntry():
   MibTable(oidIfnameEntry, indIfnameEntry, 1)
{
	// This table object is a singleton. In order to access it use
	// the static pointer ifnameEntry::instance.
	instance = this;

	add_col(new ifnameRowStatus(colIfnameRowStatus));
	add_col(new ifnameName(colIfnameName));
	add_col(new ifnameBrLan(colIfnameBrLan));
	add_col(new ifnameIP(colIfnameIP));
	add_col(new ifnameSubnet(colIfnameSubnet));
	add_col(new ifnameMacAddress(colIfnameMacAddress));
	add_col(new ifnameGateway(colIfnameGateway));
	add_col(new ifnameDNS(colIfnameDNS));

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "ifnameEntry.table");

	load_from_file(path);

	//--AgentGen BEGIN=ifnameEntry::ifnameEntry
	//--AgentGen END
}

ifnameEntry::~ifnameEntry()
{

	//--AgentGen BEGIN=ifnameEntry::~ifnameEntry
	//--AgentGen END
	save_to_file(path);
	delete path;
}

boolean ifnameEntry::ready_for_service(Vbx* pvbs, int sz)
{

	//--AgentGen BEGIN=ifnameEntry::ready_for_service
	//--AgentGen END
	return MibTable::ready_for_service(pvbs, sz);
}

void ifnameEntry::row_added(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' has been added to the table.

	//--AgentGen BEGIN=ifnameEntry::row_added
	//--AgentGen END
}

void ifnameEntry::row_delete(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' will be deleted.

	//--AgentGen BEGIN=ifnameEntry::row_delete
	//--AgentGen END
}



void ifnameEntry::set_row(MibTableRow* r, long p0, char* p1, char* p2, char* p3, char* p4, char* p5, char* p6, char* p7)
{
	r->get_nth(0)->replace_value(new SnmpInt32(p0));
	r->get_nth(1)->replace_value(new OctetStr(p1));
	r->get_nth(2)->replace_value(new OctetStr(p2));
	r->get_nth(3)->replace_value(new IpAddress(p3));
	r->get_nth(4)->replace_value(new IpAddress(p4));
	r->get_nth(5)->replace_value(new OctetStr(p5));
	r->get_nth(6)->replace_value(new IpAddress(p6));
	r->get_nth(7)->replace_value(new IpAddress(p7));
}


//--AgentGen BEGIN=ifnameEntry
//--AgentGen END




/**
 *  vlanEntry
 *
 */

vlanEntry* vlanEntry::instance = 0;

const index_info indVlanEntry[1] = {
	{ sNMP_SYNTAX_INT, FALSE, 1, 1 } };

vlanEntry::vlanEntry():
   MibTable(oidVlanEntry, indVlanEntry, 1)
{
	// This table object is a singleton. In order to access it use
	// the static pointer vlanEntry::instance.
	instance = this;

	add_col(new vlanRowStatus(colVlanRowStatus));
	add_col(new vlanID(colVlanID));
	add_col(new vlanIfname(colVlanIfname));

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "vlanEntry.table");

	load_from_file(path);

	//--AgentGen BEGIN=vlanEntry::vlanEntry
	//--AgentGen END
}

vlanEntry::~vlanEntry()
{

	//--AgentGen BEGIN=vlanEntry::~vlanEntry
	//--AgentGen END
	save_to_file(path);
	delete path;
}

boolean vlanEntry::ready_for_service(Vbx* pvbs, int sz)
{

	//--AgentGen BEGIN=vlanEntry::ready_for_service
	//--AgentGen END
	return MibTable::ready_for_service(pvbs, sz);
}

void vlanEntry::row_added(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' has been added to the table.

	//--AgentGen BEGIN=vlanEntry::row_added
	//--AgentGen END
}

void vlanEntry::row_delete(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' will be deleted.

	//--AgentGen BEGIN=vlanEntry::row_delete
	//--AgentGen END
}



void vlanEntry::set_row(MibTableRow* r, long p0, long p1, char* p2)
{
	r->get_nth(0)->replace_value(new SnmpInt32(p0));
	r->get_nth(1)->replace_value(new SnmpInt32(p1));
	r->get_nth(2)->replace_value(new OctetStr(p2));
}


//--AgentGen BEGIN=vlanEntry
//--AgentGen END




/**
 *  assocEntry
 *
 */

assocEntry* assocEntry::instance = 0;

const index_info indAssocEntry[1] = {
	{ sNMP_SYNTAX_INT, FALSE, 1, 1 } };

assocEntry::assocEntry():
   MibTable(oidAssocEntry, indAssocEntry, 1)
{
	// This table object is a singleton. In order to access it use
	// the static pointer assocEntry::instance.
	instance = this;

	add_col(new staRowStatus(colStaRowStatus));
	add_col(new staMacAddress(colStaMacAddress));
	add_col(new staSignal(colStaSignal));
	add_col(new staNoise(colStaNoise));
	add_col(new staSNR(colStaSNR));
	add_col(new staRxRate(colStaRxRate));
	add_col(new staTxRate(colStaTxRate));
	add_col(new staQLoad(colStaQLoad));
	add_col(new staRxMcs(colStaRxMcs));
	add_col(new staTxMcs(colStaTxMcs));
	add_col(new staOnlineTime(colStaOnlineTime));

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "assocEntry.table");

	load_from_file(path);

	//--AgentGen BEGIN=assocEntry::assocEntry
	//--AgentGen END
}

assocEntry::~assocEntry()
{

	//--AgentGen BEGIN=assocEntry::~assocEntry
	//--AgentGen END
	save_to_file(path);
	delete path;
}

boolean assocEntry::ready_for_service(Vbx* pvbs, int sz)
{

	//--AgentGen BEGIN=assocEntry::ready_for_service
	//--AgentGen END
	return MibTable::ready_for_service(pvbs, sz);
}

void assocEntry::row_added(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' has been added to the table.

	//--AgentGen BEGIN=assocEntry::row_added
	//--AgentGen END
}

void assocEntry::row_delete(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' will be deleted.

	//--AgentGen BEGIN=assocEntry::row_delete
	//--AgentGen END
}



void assocEntry::set_row(MibTableRow* r, long p0, char* p1, long p2, long p3, long p4, long p5, long p6, long p7, long p8, long p9
		, char* p10)
{
	r->get_nth(0)->replace_value(new SnmpInt32(p0));
	r->get_nth(1)->replace_value(new OctetStr(p1));
	r->get_nth(2)->replace_value(new SnmpInt32(p2));
	r->get_nth(3)->replace_value(new SnmpInt32(p3));
	r->get_nth(4)->replace_value(new SnmpInt32(p4));
	r->get_nth(5)->replace_value(new SnmpInt32(p5));
	r->get_nth(6)->replace_value(new SnmpInt32(p6));
	r->get_nth(7)->replace_value(new SnmpInt32(p7));
	r->get_nth(8)->replace_value(new SnmpInt32(p8));
	r->get_nth(9)->replace_value(new SnmpInt32(p9));
	r->get_nth(10)->replace_value(new OctetStr(p10));
}


//--AgentGen BEGIN=assocEntry
//--AgentGen END




/**
 *  routeEntry
 *
 */

routeEntry* routeEntry::instance = 0;

const index_info indRouteEntry[1] = {
	{ sNMP_SYNTAX_INT, FALSE, 1, 1 } };

routeEntry::routeEntry():
   MibTable(oidRouteEntry, indRouteEntry, 1)
{
	// This table object is a singleton. In order to access it use
	// the static pointer routeEntry::instance.
	instance = this;

	add_col(new routeRowStatus(colRouteRowStatus));
	add_col(new routeDestination(colRouteDestination));
	add_col(new routeNextHop(colRouteNextHop));
	add_col(new routeMetric(colRouteMetric));
	add_col(new routeFlags(colRouteFlags));
	add_col(new routeExpiredTime(colRouteExpiredTime));

	path =
	  AgentTools::make_concatenation((const char*) Mib::instance->get_persistent_objects_path().data(),
	                        "routeEntry.table");

	load_from_file(path);

	//--AgentGen BEGIN=routeEntry::routeEntry
	//--AgentGen END
}

routeEntry::~routeEntry()
{

	//--AgentGen BEGIN=routeEntry::~routeEntry
	//--AgentGen END
	save_to_file(path);
	delete path;
}

boolean routeEntry::ready_for_service(Vbx* pvbs, int sz)
{

	//--AgentGen BEGIN=routeEntry::ready_for_service
	//--AgentGen END
	return MibTable::ready_for_service(pvbs, sz);
}

void routeEntry::row_added(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' has been added to the table.

	//--AgentGen BEGIN=routeEntry::row_added
	//--AgentGen END
}

void routeEntry::row_delete(MibTableRow* row, const Oidx& index, MibTable* src)
{
	// The row 'row' with 'index' will be deleted.

	//--AgentGen BEGIN=routeEntry::row_delete
	//--AgentGen END
}



void routeEntry::set_row(MibTableRow* r, long p0, char* p1, char* p2, long p3, unsigned long p4, long p5)
{
	r->get_nth(0)->replace_value(new SnmpInt32(p0));
	r->get_nth(1)->replace_value(new OctetStr(p1));
	r->get_nth(2)->replace_value(new OctetStr(p2));
	r->get_nth(3)->replace_value(new SnmpInt32(p3));
	r->get_nth(4)->replace_value(new Gauge32(p4));
	r->get_nth(5)->replace_value(new SnmpInt32(p5));
}


//--AgentGen BEGIN=routeEntry
//--AgentGen END




arn_6h_gws_mib::arn_6h_gws_mib(): MibGroup("1")
{
	add(new title());
	add(new banner());
	add(new hostname());
	add(new ownerContact());
	add(new upTime());
	add(new moduleType());
	add(new moduleSN());
	add(new ifnameEntry());
	add(new vlanEntry());
	add(new radioFirmware());
	add(new radioBoardSN());
	add(new radioTemperature());
	add(new radioAgcMode());
	add(new radioIfout());
	add(new radioStatus());
	add(new bbFirmware());
	add(new bbFixedMCS());
	add(new bbMacAddress());
	add(new bbTxPower());
	add(new bbSignal());
	add(new bbNoise());
	add(new bbBandwidth());
	add(new bbHandover());
	add(new bbStatus());
	add(new assocCount());
	add(new assocEntry());
	add(new routeEntry());
	add(new bbSSID());
	add(new bbMESHID());
	add(new bbEncryption());
	add(new bbProtocol());
	add(new bbHT20());
	add(new bbHT20SGI());
	add(new bbOptMode());
	add(new uhfRegion());
	add(new uhfChannel());
	add(new uhfTxOnOff());
	add(new uhfTxPower());
	add(new uhfTxAutoCal());
	add(new uhfRxOnOff());
	add(new uhfRxGain());
	add(new uhfRxAutoCal());
	add(new scanChannel());
	add(new scanTimer());
	add(new scanTrigger());
	add(new gpsLongitude());
	add(new gpsLatitude());
	add(new gpsSpeed());
	add(new gpsStatus());
	add(new dlThroughput());
	add(new ulThroughput());
	add(new usageCPU());
	add(new usageMem());
}


//--AgentGen BEGIN=arn_6h_gws_mib
//--AgentGen END



//--AgentGen BEGIN=_END
//--AgentGen END

